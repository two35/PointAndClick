<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//the sprite that will be drawn for the character
sprite_index = sprite_player;

walkSpeed = 5;

//this will store the pieces the user obtains
inventory = ds_list_create();
//store the x postion of the pieces
inventoryXPos = ds_list_create();
//store the y position of the pieces
inventoryYPos = ds_list_create();
//store if the mouse is over the piece in the inventory
inventoryMouse = ds_list_create();

//the scale factor to use when drawing inventory on the screen
inventScale = 3;


////////////////////////////////////////////////////////////
/////
/////           TESTING VIEWS WITH CODE
/////
////////////////////////////////////////////////////////////
/////////////////////////////
// Start of set up the main view
/////////////////////////////
/*view_enabled = true;
view_visible[0] = true;
view_object[0] = object_player;
//where the view will start to capture images
view_xview[0] = 0;
view_yview[0] = 0;
//how much of the room should be displayed
//for mini map it should show the whole room
view_hview[0] = 500;
view_wview[0] = 500;
//the position of the view in the screen
view_xport[0] = 0
view_yport[0] = 0;
//the dimension of the view on the screen
view_wport[0] = 500; //704
view_hport[0] = 500; //576 

view_hborder[0] = room_width / 2;
view_vborder[0] = room_height / 2;

view_vspeed[0] = -1;
view_hspeed[0] = -1;
*/
//////////////////////////////////////////
///End of set up the mini map view
///////////////////////////////////////////

/////////////////////////////
// Start of set up the mini map view
/////////////////////////////
/*view_visible[1] = true;
//where the view will start to capture images
view_xview[1] = 0;
view_yview[1] = 0;
//how much of the room should be displayed
//for mini map it should show the whole room
view_hview[1] = room_height;
view_wview[1] = room_width;
//the position of the view in the screen
view_xport[1] = 500
view_yport[1] = 10;
//the dimension of the view on the screen
view_wport[1] = 500 + 20;
view_hport[1] = 185;
//////////////////////////////////////////
///End of set up the mini map view
///////////////////////////////////////////
*/











</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//moving with keys

speed = 0;

if(keyboard_check(vk_up)
|| keyboard_check(ord('W')) )
{

    vspeed = -walkSpeed;

}

if(keyboard_check(vk_down)
|| keyboard_check(ord('S')) )
{

    vspeed = walkSpeed;

}

if(keyboard_check(vk_left)
|| keyboard_check(ord('A')) )
{

    hspeed = -walkSpeed;

}

if(keyboard_check(vk_right)
|| keyboard_check(ord('D')) )
{

    hspeed = walkSpeed;

}




































</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_obstacle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xprevious;

y = yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw the sprite for the character for the main view
if(view_current == 0)
{
    //draw the sprite for the object
    draw_sprite_ext(sprite_index,-1,x,y,1,1,direction,c_white,1);
      
}

//the view for the inventory
if(view_current == 1)
{

     //draw the hub for inventory and mini map
    draw_rectangle_colour(view_xview[1] ,view_yview[1],
        view_xview[1] + view_wview[1],view_hview[1],c_dkgray,c_dkgray,c_dkgray,c_dkgray,0);  
    
    draw_rectangle_colour(view_xview[1]+5,view_yview[1]+5,
        view_xview[1] + view_wview[1]-5,view_hview[1]-5,c_ltgray,c_ltgray,c_ltgray,c_ltgray,0);
        
    draw_rectangle_colour(view_xview[1]+10,view_yview[1]+10,
        view_xview[1] + 450 ,view_hview[1]- 10,c_white,c_white,c_white,c_white,0);
        
    //draw the pieces in the inventory
    for(i = 0; i &lt; ds_list_size(inventory); i++)
    {
            
        pieceImage = ds_list_find_value(inventory,i);
        pieceX = ds_list_find_value(inventoryXPos,i);
        pieceY = ds_list_find_value(inventoryYPos,i);
        
        
        /*draw_sprite_ext(pieceImage, -1 , view_xview[1] + (15 * (i+1) + (16 * inventScale *i) ),
                        view_yview[1]+15,inventScale,inventsScale,0,c_white,1);*/
                        
        draw_sprite_ext(pieceImage, -1, pieceX, pieceY, inventScale,inventScale,0,c_white,1);
    
    }

    //check if the mouse is over any of the invetory items
    //check for the x postions of the pieces in the inventory    
    for(i = 0; i &lt; ds_list_size(inventoryXPos); i++)
    {
    
        lowerX = ds_list_find_value(inventoryXPos,i)
        upperX = lowerX + (16 * inventScale)
        
        lowerY = ds_list_find_value(inventoryYPos,i)
        upperY = lowerY + (16 * inventScale)
        
        if( (mouse_x &gt;= lowerX) &amp;&amp; (mouse_x &lt;= upperX) &amp;&amp; (mouse_y &gt;= lowerY) &amp;&amp; (mouse_y &lt;= upperY))
        {
        
           draw_roundrect_colour(lowerX,lowerY,upperX,upperY,c_red,c_green,true) //ds_list_replace(inventoryMouse,i,true);
        }
        else
        {
            ds_list_replace(inventoryMouse,i,false);
        }
    
    }

}

//the view for the mini map
if(view_current == 2)
{
      
    //draw the sprite for the object
    draw_circle_colour(x,y,20,c_white,c_green,false);

}


















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

ds_list_delete(inventory,0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
