<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
sprite_index = sprite_player;

direction = 0;

//boolean to know if the character is moving
moving = false;

x_destiny = 0;
y_destiny = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//if the player is not moving 
//have the player face the mouse pointer
//and check if the user clicked the mouse
//so that it can start moving
if(!moving)
{
    //calculate the distance between the player coordinates and the mouse coordinates
    y_diff = mouse_y - y;
    y_diff *= -1;
    x_diff = mouse_x - x;
    
    //calculate the direction the plaYer should be facing based on the
    //position of the mouse
    angle = arctan2(y_diff,x_diff); //returns angle in radians
    //convert radians to degrees
    angle = angle * 180;
    angle = angle / pi;
    //set the direction to be drawn in the draw event
    direction =  angle;
    
    //check if the user clicked the left button
    if(mouse_check_button_pressed(mb_left))
    {
        x_destiny = mouse_x;
        y_destiny = mouse_y;
        
        //the player will start to move
        moving = true;
    }
    
}

//if the player is moving 
if(moving)
{
    //move towards a the mouse coordinates while avoiding a specified object
    //                         xgoal  ,   ygoal  , stepsize, obj
    mp_potential_step_object(x_destiny, y_destiny,    8    , object_obstacle);
    
    //the absolute value of the difference between the player x and the destination x
    xDiffAbs = abs(x_destiny - x);
    
    //the absolute value of the difference between the player y and the destination y
    yDiffAbs = abs(y_destiny - y);
    
    if((xDiffAbs &lt;= sprite_width/2 + 8) &amp;&amp; (yDiffAbs &lt;= sprite_height/2 + 8))
    {
        moving = false;
    }
}















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//draw the sprite for the object
draw_sprite_ext(sprite_index,-1,x,y,1,1,direction,c_white,1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
