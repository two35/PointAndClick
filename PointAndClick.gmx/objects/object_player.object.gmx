<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
sprite_index = sprite_player;

direction = 0;

//boolean to know if the character is moving
moving = false;

x_destiny = 0;
y_destiny = 0;

walkSpeed = 5;

/////////////////////////////
// Start of set up the main view
/////////////////////////////
/*view_enabled = true;
view_visible[0] = true;
view_object[0] = object_player;
//where the view will start to capture images
view_xview[0] = 0;
view_yview[0] = 0;
//how much of the room should be displayed
//for mini map it should show the whole room
view_hview[0] = 500;
view_wview[0] = 500;
//the position of the view in the screen
view_xport[0] = 0
view_yport[0] = 0;
//the dimension of the view on the screen
view_wport[0] = 500; //704
view_hport[0] = 500; //576 

view_hborder[0] = room_width / 2;
view_vborder[0] = room_height / 2;

view_vspeed[0] = -1;
view_hspeed[0] = -1;
*/
//////////////////////////////////////////
///End of set up the mini map view
///////////////////////////////////////////

/////////////////////////////
// Start of set up the mini map view
/////////////////////////////
/*view_visible[1] = true;
//where the view will start to capture images
view_xview[1] = 0;
view_yview[1] = 0;
//how much of the room should be displayed
//for mini map it should show the whole room
view_hview[1] = room_height;
view_wview[1] = room_width;
//the position of the view in the screen
view_xport[1] = 500
view_yport[1] = 10;
//the dimension of the view on the screen
view_wport[1] = 500 + 20;
view_hport[1] = 185;
//////////////////////////////////////////
///End of set up the mini map view
///////////////////////////////////////////
*/











</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//code for mouse click movement

//if the player is not moving 
//have the player face the mouse pointer
//and check if the user clicked the mouse
//so that it can start moving
/*if(!moving)
{
    //calculate the distance between the player coordinates and the mouse coordinates
    y_diff = mouse_y - y;
    y_diff *= -1;
    x_diff = mouse_x - x;
    
    //calculate the direction the plaYer should be facing based on the
    //position of the mouse
    angle = arctan2(y_diff,x_diff); //returns angle in radians
    //convert radians to degrees
    angle = angle * 180;
    angle = angle / pi;
    //set the direction to be drawn in the draw event
    direction =  angle;
    
    //check if the user clicked the left button
    if(mouse_check_button_pressed(mb_left))
    {
        x_destiny = mouse_x;
        y_destiny = mouse_y;
        
        //the player will start to move
        moving = true;
    }
    
}

//if the player is moving 
if(moving)
{
    //move towards a the mouse coordinates while avoiding a specified object
    //                         xgoal  ,   ygoal  , stepsize, obj
    mp_potential_step_object(x_destiny, y_destiny,    8    , object_obstacle);
    
    //the absolute value of the difference between the player x and the destination x
    xDiffAbs = abs(x_destiny - x);
    
    //the absolute value of the difference between the player y and the destination y
    yDiffAbs = abs(y_destiny - y);
    
    if((xDiffAbs &lt;= sprite_width/2 + 8) &amp;&amp; (yDiffAbs &lt;= sprite_height/2 + 8))
    {
        moving = false;
    }
}
*/


//moving with keys

speed = 0;

/*switch(keyboard_key)
{

    case vk_up: vspeed = -walkSpeed; break;
    case vk_down: vspeed = walkSpeed; break;
    case vk_left: hspeed = -walkSpeed; break;
    case vk_right: hspeed = walkSpeed; break;

}*/

if(keyboard_check(vk_up))
{

    vspeed = -walkSpeed;

}

if(keyboard_check(vk_down))
{

    vspeed = walkSpeed;

}

if(keyboard_check(vk_left))
{

    hspeed = -walkSpeed;

}

if(keyboard_check(vk_right))
{

    hspeed = walkSpeed;

}






































</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_obstacle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xprevious;

y = yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw the sprite for the character for the main view
if(view_current == 0)
{
    //draw the sprite for the object
    draw_sprite_ext(sprite_index,-1,x,y,1,1,direction,c_white,1);
      
}

if(view_current == 1)
{

     //draw the hub for inventory and mini map
    draw_rectangle_colour(view_xview[1] ,view_yview[1],
        view_xview[1] + view_wview[1],view_hview[1],c_dkgray,c_dkgray,c_dkgray,c_dkgray,0);
        
    
    draw_rectangle_colour(view_xview[1]+5,view_yview[1]+5,
        view_xview[1] + view_wview[1]-5,view_hview[1]-5,c_ltgray,c_ltgray,c_ltgray,c_ltgray,0);
        
    draw_rectangle_colour(view_xview[1]+10,view_yview[1]+10,
        view_xview[1] + 450 ,view_hview[1]- 10,c_white,c_white,c_white,c_white,0);

}

if(view_current == 2)
{

      
    //draw the sprite for the object
    draw_circle_colour(x,y,20,c_white,c_green,false);

}





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
